apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel
  labels:
    app.kubernetes.io/name: otel-collector

spec:
  resources:
    requests:
      cpu: 11m
      memory: 116M

  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName

  serviceAccount: otel-collector
  # targetAllocator:
  #   enabled: true
  mode: daemonset
  ports:
    - name: loki
      port: 3500
      protocol: TCP
    - name: prometheus
      port: 9464
      protocol: TCP

  ingress:
    type: ingress
    ingressClassName: "traefik"
    ruleType: subdomain
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
    hostname: otel.ayanides.cloud

  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"
      jaeger:
        protocols:
          thrift_compact:
            endpoint: 0.0.0.0:6831
      loki:
        protocols:
          http:
            endpoint: 0.0.0.0:3500
        use_incoming_timestamp: true

    exporters:

      otlp:
        endpoint: tempo.monitoring:4317
        tls:
          insecure: true

      # prometheus:
      #   endpoint: 0.0.0.0:9464
      #   resource_to_telemetry_conversion:
      #     enabled: true
      #   enable_open_metrics: true

      loki:
        endpoint: http://loki.monitoring:3100/loki/api/v1/push
        default_labels_enabled:
          # disable exporter field
          exporter: false

    processors:
      batch:
      # memory_limiter:
      #   check_interval: 1s
        # limit_percentage: 50
        # spike_limit_percentage: 30


      k8sattributes:
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
        extract:
          metadata:
            - "k8s.namespace.name"
            - "k8s.deployment.name"
            - "k8s.statefulset.name"
            - "k8s.daemonset.name"
            - "k8s.cronjob.name"
            - "k8s.job.name"
            - "k8s.node.name"
            - "k8s.pod.name"
            - "k8s.pod.uid"
            - "k8s.pod.start_time"
          labels:
            - tag_name: $$1
              key_regex: (.*)
              from: pod
          annotations:
            - tag_name: $$1
              key_regex: (.*)
              from: pod

      transform:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              - merge_maps(cache, ParseJSON(body), "upsert") where IsMatch(body, "^\\{")

              # Traefik
              - set(attributes["remote_addr"], cache["remote_addr"])
              - set(attributes["http_host"], cache["http_host"])
              - set(attributes["request_uri"], cache["request_uri"])
              - set(attributes["request_method"], cache["request_method"])
              - set(attributes["status"], cache["status"])
              # Nginx
              - set(attributes["ClientHost"], cache["ClientHost"])
              - set(attributes["RequestHost"], cache["RequestHost"])
              - set(attributes["RequestPath"], cache["RequestPath"])
              - set(attributes["RequestMethod"], cache["RequestMethod"])
              - set(attributes["OriginStatus"], cache["OriginStatus"])

      attributes:
        actions:
        - action: upsert
          key: loki.attribute.labels
          value: >
            node_name, namespace, instance, job, pod, container, app, component, filename, stream
            remote_addr, http_host, request_uri, request_method, status,
            ClientHost, RequestHost, RequestPath, RequestMethod, OriginStatus

    service:
      pipelines:
        traces:
          receivers: [otlp, jaeger]
          processors: [k8sattributes, batch]
          exporters: [otlp]
        # metrics:
        #   receivers: [otlp]
        #   processors: [k8sattributes, batch]
        #   exporters: [prometheus]
        logs:
          receivers: [loki]
          processors: [attributes, transform, batch]
          exporters: [loki]
