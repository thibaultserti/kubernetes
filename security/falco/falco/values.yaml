driver:
  enabled: true

collectors:
  enabled: true

tty: true

falco:
  rules_file:
    - /etc/falco/falco_rules.yaml
    - /etc/falco/falco_rules.local.yaml
    - /etc/falco/k8s_audit_rules.yaml
    - /etc/falco/rules.d
  load_plugins: [k8saudit, json]
  plugins:
    - name: k8saudit
      library_path: libk8saudit.so
      init_config:
        ""
      open_params: "http://:9765/k8s-audit"
    - name: json
      library_path: libjson.so
      init_config: ""
  json_output: true
  json_include_output_property: true
  priority: warning
  metrics:
    enabled: false
  grpc:
    enabled: true
  grpc_output:
    enabled: true
  syscall_event_drops:
    actions:
      - log
  http_output:
    enabled: true
    insecure: true
    url: "http://falcosidekick:2801/"

falcoctl:
  config:
    artifact:
      install:
        refs: [falco-rules:1,k8saudit-rules:0.6]
      follow:
        refs: [falco-rules:1,k8saudit-rules:0.6]

services:
  - name: k8saudit-webhook
    type: NodePort
    ports:
      - port: 9765
        nodePort: 30007
        protocol: TCP

customRules:
  rules-override.yaml: |-
    - macro: policyreporter_writing_state
      condition: (proc.exepath=/app/policyreporter and proc.name=policyreporter and fd.name=/sqlite)
    - macro: metallb_frr_writing_state
      condition: (proc.pname=frr-metrics and fd.name startswith /root/.history_frr)
    - macro: ciliumoperator_writing_state
      condition: (proc.name=cilium-operator and fd.name startswith /1)
    - macro: kubelet_writing_state
      condition: (proc.name=kubelet)
    - rule: Write below root
      desc: an attempt to write to any file directly below / or /root
      condition: >
        root_dir and evt.dir = < and open_write
        and proc_name_exists
        and not fd.name in (known_root_files)
        and not fd.directory pmatch (known_root_directories)
        and not exe_running_docker_save
        and not gugent_writing_guestagent_log
        and not dse_writing_tmp
        and not zap_writing_state
        and not airflow_writing_state
        and not rpm_writing_root_rpmdb
        and not maven_writing_groovy
        and not chef_writing_conf
        and not kubectl_writing_state
        and not cassandra_writing_state
        and not galley_writing_state
        and not calico_writing_state
        and not rancher_writing_root
        and not runc_writing_exec_fifo
        and not mysqlsh_writing_state
        and not known_root_conditions
        and not user_known_write_root_conditions
        and not user_known_write_below_root_activities
        and not metallb_frr_writing_state
        and not policyreporter_writing_state
        and not ciliumoperator_writing_state
        and not kubelet_writing_state
      output: File below / or /root opened for writing (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
      priority: ERROR
      tags: [maturity_sandbox, host, container, filesystem, mitre_persistence, TA0003]

    - macro: kyverno_cleanup
      condition: (proc.cmdline="kubectl get admissionreports.kyverno.io -A" or proc.cmdline="kubectl get clusteradmissionreports.kyverno.io -A")
    - rule: The docker client is executed in a container
      desc: Detect a k8s client tool executed inside a container
      condition: >
        spawned_process and container and not user_known_k8s_client_container_parens and proc.name in (k8s_client_binaries)
        and not kyverno_cleanup
      output: Docker or kubernetes client executed in container (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
      priority: WARNING
      tags: [maturity_sandbox, container, mitre_execution, T1610]

    - macro: prometheus_reload
      condition: (fd.name=/etc/alertmanager/config_out/alertmanager.env.yaml.tmp and proc.name=prometheus-conf and container.image.repository=quay.io/prometheus-operator/prometheus-config-reloader)
    - macro: mutipathd_write_etc
      condition: (proc.cmdline="multipathd -d -s" and fd.name=/etc/multipath/wwids)
    - rule: Write below etc
      desc: an attempt to write to any file below /etc
      condition: write_etc_common and not prometheus_reload and not mutipathd_write_etc
      output: File below /etc opened for writing (file=%fd.name pcmdline=%proc.pcmdline gparent=%proc.aname[2] ggparent=%proc.aname[3] gggparent=%proc.aname[4] evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
      priority: ERROR
      tags: [maturity_sandbox, host, container, filesystem, mitre_persistence, T1098]

    - macro: vault_csi_provider_secret
      condition: (ka.user.name=system:serviceaccount:vault:vault-csi-provider and ka.target.name=vault-csi-provider-hmac-key)
    - macro: trivy_operator_secret
      condition: (ka.user.name=system:serviceaccount:trivy:trivy-operator and ka.target.name=trivy-operator-trivy-config)
    - macro: prometheus_operator_secret
      condition: >
        (
          (ka.user.name=system:serviceaccount:monitoring:prometheus-stack-kube-prom-operator
          and
            (
              ka.target.name=prometheus-prometheus-stack-kube-prom-prometheus-tls-assets-0
              or ka.target.name=alertmanager-prometheus-stack-kube-prom-alertmanager-tls-assets-0
              or ka.target.name=alertmanager-prometheus-stack-kube-prom-alertmanager-generated
              or ka.target.name=alertmanager-secret
              or ka.target.name=prometheus-prometheus-stack-kube-prom-prometheus
              or ka.target.name=alertmanager-prometheus-stack-kube-prom-alertmanager
              or ka.target.name=prometheus-stack-kube-prom-admission
              or ka.target.name=prometheus-prometheus-stack-kube-prom-prometheus-web-config
              or ka.target.name=alertmanager-prometheus-stack-kube-prom-alertmanager-web-config
            )
          )
          or
          (
          ka.user.name=system:serviceaccount:monitoring:prometheus-stack-kube-prom-admission
          and
            (
              ka.target.name=prometheus-stack-kube-prom-admission
            )
          )
        )
    - macro: kubernetes_dashboard_secret
      condition: (ka.user.name=system:serviceaccount:kubernetes-dashboard:kubernetes-dashboard and ka.target.name=kubernetes-dashboard-key-holder)
    - macro: kube_controller_manager_secret
      condition: (ka.user.name=system:kube-controller-manager and (ka.target.name=attachdetach-controller or ka.target.name=expand-controller))
    - macro: longhorn_secret
      condition: (ka.user.name=system:serviceaccount:longhorn-system:longhorn-service-account and ka.target.name=longhorn-webhook-tls)
    - rule: K8s Secret Get Successfully
      desc: >
        Detect any attempt to get a secret. Service account tokens are excluded.
      condition: >
        secret and kget
        and kactivity
        and response_successful
        and not prometheus_operator_secret
        and not trivy_operator_secret
        and not vault_csi_provider_secret
        and not kubernetes_dashboard_secret
        and not kube_controller_manager_secret
        and not longhorn_secret
      output: K8s Secret Get Successfully (user=%ka.user.name secret=%ka.target.name ns=%ka.target.namespace resource=%ka.target.resource resp=%ka.response.code decision=%ka.auth.decision reason=%ka.auth.reason)
      priority: ERROR
      source: k8s_audit
      tags: [k8s]


    - macro: node_sa
      condition: (ka.user.name startswith system:node or ka.user.name=system:kube-controller-manager)
    - macro: longhorn_sa
      condition: (ka.user.name=system:serviceaccount:longhorn-system:longhorn-service-account)
    - rule: Service Account Created in Kube Namespace
      desc: Detect any attempt to create a serviceaccount in the kube-system or kube-public namespaces
      condition: kevt and serviceaccount and kcreate and ka.target.namespace in (kube-system, kube-public) and response_successful and not trusted_sa and not node_sa and not longhorn_sa
      output: Service account created in kube namespace (user=%ka.user.name serviceaccount=%ka.target.name resource=%ka.target.resource ns=%ka.target.namespace)
      priority: WARNING
      source: k8s_audit
      tags: [k8s]

    - macro: longhorn_mount_in_privileged_containers
      condition: (container.image.repository=docker.io/longhornio/longhorn-manager)
    - macro: csi_mount_in_privileged_containers
      condition: (proc.pname=secrets-store-c and k8s.ns.name=kube-system)
    - rule: Mount Launched in Privileged Container
      desc: Detect file system mount happened inside a privileged container which might lead to container escape.
      condition: >
        spawned_process and container
        and container.privileged=true
        and proc.name=mount
        and not mount_info
        and not known_gke_mount_in_privileged_containers
        and not known_aks_mount_in_privileged_containers
        and not user_known_mount_in_privileged_containers
        and not longhorn_mount_in_privileged_containers
        and not csi_mount_in_privileged_containers
      output: Mount was executed inside a privileged container (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
      priority: WARNING
      tags: [maturity_incubating, container, cis, filesystem, mitre_privilege_escalation, T1611]